# config/packages/messenger.yaml
framework:
    messenger:
        failure_transport: failed

        transports:
            sync: 'sync://'

            # Primary async transport using RabbitMQ (AMQP via php-amqplib)
            async:
                dsn: 'amqp+lib://%env(RABBITMQ_USER)%:%env(RABBITMQ_PASSWORD)%@%env(RABBITMQ_HOST)%:%env(RABBITMQ_PORT)%/%2f/async'
                retry_strategy:
                    max_retries: 3
                    delay: 1000
                    multiplier: 2
                    max_delay: 10000
                options:
                    exchange:
                        name: async_exchange
                        type: direct
                    queues:
                        async_queue:
                            binding_keys: [async]

            # High priority commands using RabbitMQ
            high_priority:
                dsn: 'amqp+lib://%env(RABBITMQ_USER)%:%env(RABBITMQ_PASSWORD)%@%env(RABBITMQ_HOST)%:%env(RABBITMQ_PORT)%/%2f/high_priority'
                retry_strategy:
                    max_retries: 5
                    delay: 500
                    multiplier: 1.5
                    max_delay: 5000
                options:
                    exchange:
                        name: high_priority_exchange
                        type: direct
                    queues:
                        high_priority_queue:
                            binding_keys: [high_priority]

            # Events/notifications using RabbitMQ
            notifications:
                dsn: 'amqp+lib://%env(RABBITMQ_USER)%:%env(RABBITMQ_PASSWORD)%@%env(RABBITMQ_HOST)%:%env(RABBITMQ_PORT)%/%2f/notifications'
                retry_strategy:
                    max_retries: 3
                    delay: 1000
                    multiplier: 2
                    max_delay: 30000
                options:
                    exchange:
                        name: events_exchange
                        type: fanout
                    queues:
                        notifications_queue: {}

            # Failed messages storage (keep in Doctrine for reliability - DLQ)
            failed: 'doctrine://default?queue_name=failed'

        routing:
            # Route payment commands to high priority
            'App\Message\Command\Payment\*': high_priority

            # Route regular commands to async
            'App\Message\Command\*': async

            # Route queries synchronously
            'App\Message\Query\*': sync

            # Route events to notifications
            'App\Message\Event\*': notifications

        default_bus: command.bus
        
        # Configure which exceptions should be retried vs sent to DLQ
        failure_transport_retry_strategy:
            max_retries: 0  # Failed messages go directly to DLQ
        
        buses:
            command.bus:
                middleware:
                    - validation
                    - doctrine_transaction
            query.bus:
                middleware:
                    - validation
            event.bus:
                default_middleware:
                    enabled: true
                    allow_no_handlers: true
                middleware:
                    - validation